import pandas as pd
import numpy as np
import torch
import transformers
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score, precision_recall_fscore_support, confusion_matrix

# Load the BBC News Dataset
df = pd.read_csv("bbcdataset.csv")

# Split the dataset into train, validation, and test sets
train_df, val_df = train_test_split(df, test_size=0.1, random_state=42)
val_df, test_df = train_test_split(val_df, test_size=0.5, random_state=42)

# Preprocess the text data
tokenizer = transformers.BertTokenizer.from_pretrained('bert-base-uncased')

train_encodings = tokenizer(list(train_df['text']), truncation=True, padding=True)
val_encodings = tokenizer(list(val_df['text']), truncation=True, padding=True)
test_encodings = tokenizer(list(test_df['text']), truncation=True, padding=True)

train_labels = list(train_df['category'])
val_labels = list(val_df['category'])
test_labels = list(test_df['category'])

class BBCDataset(torch.utils.data.Dataset):
    def __init__(self, encodings, labels):
        self.encodings = encodings
        self.labels = labels
    
    def __getitem__(self, idx):
        item = {key: torch.tensor(val[idx]) for key, val in self.encodings.items()}
        item['labels'] = torch.tensor(self.labels[idx])
        return item
    
    def __len__(self):
        return len(self.labels)

train_dataset = BBCDataset(train_encodings, train_labels)
val_dataset = BBCDataset(val_encodings, val_labels)
test_dataset = BBCDataset(test_encodings, test_labels)

# Fine-tune a pre-trained model on the classification task
model = transformers.BertForSequenceClassification.from_pretrained('bert-base-uncased', num_labels=5)

device = torch.device('cuda') if torch.cuda.is_available() else torch.device('cpu')
model.to(device)

train_loader = torch.utils.data.DataLoader(train_dataset, batch_size=16, shuffle=True)
val_loader = torch.utils.data.DataLoader(val_dataset, batch_size=16, shuffle=False)
test_loader = torch.utils.data.DataLoader(test_dataset, batch_size=16, shuffle=False)

optimizer = torch.optim.AdamW(model.parameters(), lr=1e-5)
# Train the model
num_epochs = 3

for epoch in range(num_epochs):
    train_loss = 0
    train_acc = 0
    model.train()

    for batch in train_loader:
        optimizer.zero_grad()
        input_ids = batch['input_ids'].to(device)
        attention_mask = batch['attention_mask'].to(device)
        labels = batch['labels'].to(device)

        outputs = model(input_ids, attention_mask=attention_mask, labels=labels)
        loss = outputs.loss
        logits = outputs.logits

        loss.backward()
        optimizer.step()

        train_loss += loss.item()
        train_acc += (torch.argmax(logits, axis=1) == labels).sum().item()

    train_loss /= len(train_dataset)
    train_acc /= len(train_dataset)

    val_loss = 0
    val_acc = 0
    model.eval()

    with torch.no_grad():
        for batch in val_loader:
            input_ids = batch['input_ids'].to(device)
            attention_mask = batch['attention_mask'].to(device)
            labels = batch['labels'].to(device)

            outputs = model(input_ids, attention_mask=attention_mask, labels=labels)
            loss = outputs.loss
            logits = outputs.logits

            val_loss += loss.item()
            val_acc += (torch.argmax(logits, axis=1) == labels).sum().item()

    val_loss /= len(val_dataset)
    val_acc /= len(val_dataset)

    print(f"Epoch {epoch + 1} Train Loss: {train_loss:.2f} Train Acc: {train_acc:.2f} Val Loss: {val_loss:.2f} Val Acc: {val_acc:.2f}")

# Make predictions on the test set
test_preds = []
test_labels_list = []

model.eval()

with torch.no_grad():
    for batch in test_loader:
        input_ids = batch['input_ids'].to(device)
        attention_mask = batch['attention_mask'].to(device)
        labels = batch['labels'].to(device)

        outputs = model(input_ids, attention_mask=attention_mask, labels=labels)
        logits = outputs.logits

        preds = torch.argmax(logits, axis=1)
        test_preds.extend(preds.tolist())
        test_labels_list.extend(labels.tolist())

test_acc = accuracy_score(test_labels_list, test_preds)
test_p, test_r, test_f1, _ = precision_recall_fscore_support(test_labels_list, test_preds, average='macro')
test_cm = confusion_matrix(test_labels_list, test_preds)

print(f"Test Accuracy: {test_acc:.2f}")
print(f"Test Precision: {test_p:.2f}")
print(f"Test Recall: {test_r:.2f}")
print(f"Test F1: {test_f1:.2f}")
print(f"Confusion Matrix: \n{test_cm}")
